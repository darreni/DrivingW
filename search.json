[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About myself:\nI am a Professor of Zoology at the University of British Columbia, where I have the great fortune to work with a wonderful group of students. To learn more about our research, go to: https://www.zoology.ubc.ca/~irwin/irwinlab/\nAbout this website:\nThe scripts, data, and figures shown in this website were used as the basis for the research article listed below, which should be cited as the source of information from this website:\nIrwin, D. 2025. The driving W hypothesis for low within-population mitochondrial DNA diversity and between-population mitochondrial capture. BioRxiv.\nThis whole website was generated using Quarto, which allows embedding of runnable Julia code.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Model of meiotic drive in ZW systems",
    "section": "",
    "text": "Here I will develop a model for simulating how meiotic drive affects diversity within a population and sweeps between populations.\nThe code blocks below are written in the Julia programming language. If you’ve never used Julia, you can learn more and easily install for free here.\n\n\n\n\n\nThis website is a Quarto project and each page is a Quarto notebook, which can run and display the results of Julia (or other) code blocks, along with text narration, and output in html, pdf, Word, etc.To learn more about Quarto websites visit https://quarto.org/docs/websites.\n\nCitation\nThe scripts, data, and figures shown in this website were used as the basis for the research article listed below, which should be cited as the source of information from this website:\nIrwin, D. 2025. The driving W hypothesis for low within-population mitochondrial DNA diversity and between-population mitochondrial capture. BioRxiv. \n\n\nLoad required Julia packages\nIf you don’t already have these packages installed, you will need to load packages used in the script, so run what is in this section below. It will take some time to install and precompile the packages:\nimport Pkg\nPkg.add(\"StatsBase\")\nPkg.add(\"Plots\")\nNow actually load those packages into the Julia session:\n\nusing StatsBase  # needed for \"sample\" function\nusing Plots  # for graphing results\n\nSet a random number seed, so we get the same series of random numbers as in the paper (reproducible randomness! :)\n\nusing Random\nRandom.seed!(379)\n\nTaskLocalRNG()\n\n\n\n\nBuilding the model\nIn the code blocks below, I will create data types (using the struct command) that represent chromosomes, individuals, and populations. I also build functions that create and govern interactions between these entities.\n\nCreate a data structure to store info about a chromosome\nThis will store:\n\nkind of chromosome (Z or W, or another name representing an autosome)\nability to connect to spindle to egg\nsurvival fitness loss of having this chromosome (to be subtracted from an idealized chromosome of fitness = 1)\nability to suppress drivers\n\nThe cell below creates a data type (Chrom) that can store four fields with the names give (corresponding to the above):\n\nstruct Chrom\n    kind\n    spindleAttraction\n    fitnessLoss\n    suppressStrength\nend\n\n\nNow actually create some chromosome types\nWe now create some specific kinds of chromosomes, storing them as instances of the Chrom data type:\n\ndriveStrength = 1.5  # sets this to be the drive strength of each driving chrom type\nboringW = Chrom(\"W\", 1.0, 0.0, 0.0) # a simple nothing-special W chromosome\ndrivingW = Chrom(\"W\", driveStrength, 0.0, 0.0) # a driving W\nboringZ = Chrom(\"Z\", 1.0, 0.0, 0.0) \ndrivingZ = Chrom(\"Z\", driveStrength, 0.0, 0.0)\nboringAutosome1 = Chrom(\"1\", 1.0, 0.0, 0.0)\ndrivingAutosome1 = Chrom(\"1\", driveStrength, 0.0, 0.0)\ndriveSuppressorAutosome1 = Chrom(\"1\", 1.0, 0.0, 0.5) # autosome causing partial suppression of drive (half suppression when homozygous)\ndriveCancellerAutosome1 = Chrom(\"1\", 1.0, 0.0, 1.0)  # when homozygous, completely suppresses drive\ndriveStrengthStrong = 3.0 # sets this as the stronger driving strength for some sims\ndrivingWstrong = Chrom(\"W\", driveStrengthStrong, 0.0, 0.0)\ndriveStrengthWeak = 1.1 # sets this as the weaker driving strength for some sims\ndrivingWweak = Chrom(\"W\", driveStrengthWeak, 0.0, 0.0)\n\nChrom(\"W\", 1.1, 0.0, 0.0)\n\n\nIn the above, “boring” means non-driving and non-suppressing chromosomes.\nStore some of these kinds of chromosomes in a vector, for easy reference later:\n\nchromKinds = [boringZ, \n            drivingZ,\n            boringW,\n            drivingW,\n            drivingWstrong,\n            drivingWweak,\n            boringAutosome1,\n            drivingAutosome1]\n\n8-element Vector{Chrom}:\n Chrom(\"Z\", 1.0, 0.0, 0.0)\n Chrom(\"Z\", 1.5, 0.0, 0.0)\n Chrom(\"W\", 1.0, 0.0, 0.0)\n Chrom(\"W\", 1.5, 0.0, 0.0)\n Chrom(\"W\", 3.0, 0.0, 0.0)\n Chrom(\"W\", 1.1, 0.0, 0.0)\n Chrom(\"1\", 1.0, 0.0, 0.0)\n Chrom(\"1\", 1.5, 0.0, 0.0)\n\n\n\n\n\nMake a struct for storing info about an individual\nThis will store:\n\nSex chromosome kind from egg.\nSex chromosome kind from sperm.\nAutosome 1 kind from egg.\nAutosome 1 kind from sperm.\n\n\nstruct Indiv\n    sexChromFromEgg \n    sexChromFromSperm\n    autosome1FromEgg\n    autosome1FromSperm\nend\n\n\nNow create some kinds of individuals\nBelow, we construct individuals by specifying which kind of chromosome is in each of the four slots above:\n\nbegin\nfemaleBoring = Indiv(boringW, boringZ, boringAutosome1, boringAutosome1)\nfemaleDriveW = Indiv(drivingW, boringZ, boringAutosome1, boringAutosome1)\nfemaleDriveWstrong = Indiv(drivingWstrong, boringZ, boringAutosome1, boringAutosome1)\nfemaleDriveWweak = Indiv(drivingWweak, boringZ, boringAutosome1, boringAutosome1)\nfemaleDriveZ = Indiv(boringW, drivingZ, boringAutosome1, boringAutosome1)\nfemaleDriveWZ = Indiv(drivingW, drivingZ, boringAutosome1, boringAutosome1)\nfemaleFirstDriveA = Indiv(boringW, boringZ, drivingAutosome1, boringAutosome1)\nfemaleSecondDriveA = Indiv(boringW, boringZ, boringAutosome1, drivingAutosome1)\nfemaleTwoDriveA = Indiv(boringW, boringZ, drivingAutosome1, drivingAutosome1)\nfemaleTwoDriveSuppressorA = Indiv(boringW, boringZ, driveSuppressorAutosome1, driveSuppressorAutosome1)\nfemaleTwoDriveCancellerA = Indiv(boringW, boringZ, driveCancellerAutosome1, driveCancellerAutosome1)\nmaleBoring = Indiv(boringZ, boringZ, boringAutosome1, boringAutosome1)\nmaleFirstDriveZ = Indiv(drivingZ, boringZ, boringAutosome1, boringAutosome1)\nmaleSecondDriveZ = Indiv(boringZ, drivingZ, boringAutosome1, boringAutosome1)\nmaleTwoDriveZ = Indiv(drivingZ, drivingZ, boringAutosome1, boringAutosome1)\nmaleFirstDriveA = Indiv(boringZ, boringZ, drivingAutosome1, boringAutosome1)\nmaleSecondDriveA = Indiv(boringZ, boringZ, boringAutosome1, drivingAutosome1)\nmaleTwoDriveA = Indiv(boringZ, boringZ, drivingAutosome1, drivingAutosome1)\nmaleTwoDriveSuppressorA = Indiv(boringZ, boringZ, driveSuppressorAutosome1, driveSuppressorAutosome1)\nmaleTwoDriveCancellerA = Indiv(boringW, boringZ, driveCancellerAutosome1, driveCancellerAutosome1)\nend\n\nIndiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0))\n\n\n\n\n\nWrite a mating function\nGiven one female (ZW) and one male (ZZ) parent, the function will produce one offspring, incorporating transmission advantage as calculated by the ratio of spindleAttraction of each chromosome compared to total spindleAttraction (modified by suppression).\n\nfunction makeOneOffspring(female, male) \n    # determine sex chromosome of egg, weighted by spindleAttraction\n    # but moderated by suppressors\n    driveAdvantage = female.sexChromFromEgg.spindleAttraction / \n                    (female.sexChromFromEgg.spindleAttraction + female.sexChromFromSperm.spindleAttraction)\n    # determine drive suppression strength by averaging two alleles\n    suppressionStrength = (female.autosome1FromEgg.suppressStrength +   \n                            female.autosome1FromSperm.suppressStrength) / 2\n    if suppressionStrength &gt; 1.0\n        suppressionStrength = 1.0\n    end\n    transProbW = suppressionStrength * 0.5 + (1 - suppressionStrength) * \n                driveAdvantage \n    eggSexChrom = sample([female.sexChromFromEgg, female.sexChromFromSperm], \n        Weights([transProbW, 1 - transProbW]))\n    # determine sex chromosome of sperm, with no drive (Mendelian)\n    spermSexChrom = sample([male.sexChromFromEgg, male.sexChromFromSperm])\n    # determine autosome1 in egg, weighted by spindleAttraction\n    # but moderated by suppressors (I don't think I will use this much, but for completeness putting it here now)\n    driveAdvantageAutosome1 = female.autosome1FromEgg.spindleAttraction / \n                    (female.autosome1FromEgg.spindleAttraction +\n                    female.autosome1FromSperm.spindleAttraction)\n    # use same suppression strength calculated above\n    transProbChromFromEgg = suppressionStrength * 0.5 + (1 - suppressionStrength) * \n                driveAdvantageAutosome1\n    eggAutosome1 = sample([female.autosome1FromEgg, female.autosome1FromSperm], \n                    Weights([transProbChromFromEgg, 1 - transProbChromFromEgg]))\n    # determine autosome1 in sperm, Mendelian\n    spermAutosome1 = sample([male.autosome1FromEgg, male.autosome1FromSperm])\n    \n    return Indiv(eggSexChrom, spermSexChrom, eggAutosome1, spermAutosome1)\nend\n\nmakeOneOffspring (generic function with 1 method)\n\n\nMake a function to test the function above:\n\nfunction test_makeOneOffspring(female, male, reps)\n    offspringSex = fill(\"N\", reps)\n    for i in 1:reps\n        kid = makeOneOffspring(female, male)\n        if kid.sexChromFromEgg.kind == \"W\"\n            offspringSex[i] = \"F\"\n        else offspringSex[i] = \"M\"\n        end\n    end\n    proportionFemale = (sum(offspringSex .== \"F\") / reps)\n    println(\"The proportion of offspring who are female is \" * string(proportionFemale))\nend\n\ntest_makeOneOffspring (generic function with 1 method)\n\n\nNow run some tests:\n\ntest_makeOneOffspring(femaleDriveW, maleBoring, 1_000_000)\n\nThe proportion of offspring who are female is 0.599241\n\n\n\ntest_makeOneOffspring(femaleDriveWZ, maleBoring, 1_000_000)\n\nThe proportion of offspring who are female is 0.499607\n\n\n\nfemaleDriveWandSuppressorTwoCopies = Indiv(drivingW, boringZ, driveSuppressorAutosome1, driveSuppressorAutosome1)\ntest_makeOneOffspring(femaleDriveWandSuppressorTwoCopies, maleBoring, 1_000_000)\n\nThe proportion of offspring who are female is 0.550221\n\n\n\nfemaleDriveWandCancellerTwoCopies = Indiv(drivingW, boringZ, driveCancellerAutosome1, driveCancellerAutosome1)\ntest_makeOneOffspring(femaleDriveWandCancellerTwoCopies, maleBoring, 1_000_000)\n\nThe proportion of offspring who are female is 0.499685\n\n\n\n\nMake a Population type for storing info about whole populations\nThis will contain two vectors (females, and males), in which the cells contain individuals (i.e., of type Indiv), each of which contains chromosomes (i.e., of type Chrom).\n\nmutable struct Population\n    popFemales\n    popMales\nend\n\n\nNow construct some populations:\npop1 has 5% driving W:\n\npop1setPropDrivingW = 0.05\npop1SizeFemale = 10_000\npop1SizeMale = 10_000\npop1Females = vcat(fill(femaleDriveW, Int(round(pop1setPropDrivingW * pop1SizeFemale))), fill(femaleBoring, Int(round((1-pop1setPropDrivingW) * pop1SizeFemale))))\npop1Males = vcat(fill(maleBoring, pop1SizeMale))\npop1 = Population(pop1Females, pop1Males)\n\nPopulation(Indiv[Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))  …  Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))], Indiv[Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))  …  Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))])\n\n\npop1B has 5% driving W (of the weak variety):\n\npop1BsetPropDrivingWweak = 0.05\npop1BSizeFemale = 10_000\npop1BSizeMale = 10_000\npop1BFemales = vcat(fill(femaleDriveWweak, Int(round(pop1BsetPropDrivingWweak * pop1BSizeFemale))), fill(femaleBoring, Int(round((1-pop1BsetPropDrivingWweak) * pop1BSizeFemale))))\npop1BMales = vcat(fill(maleBoring, pop1BSizeMale))\npop1B = Population(pop1BFemales, pop1BMales)\n\nPopulation(Indiv[Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.1, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))  …  Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))], Indiv[Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))  …  Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))])\n\n\npop2 has 5% driving Z. Here we set the proportions of males with different kinds of Z by assuming Hardy-Weinberg equilibrium:\n\npop2setPropDrivingZ = 0.05\npop2SizeFemale = 10_000\npop2SizeMale = 10_000\npop2Females = vcat(fill(femaleDriveZ, Int(round(pop2setPropDrivingZ * pop2SizeFemale))), \n                fill(femaleBoring, Int(round((1-pop2setPropDrivingZ) * pop2SizeMale))))\npop2numMaleTwoDriveZ = Int(round(pop2setPropDrivingZ^2 * pop2SizeMale))\npop2numMaleFirstDriveZ = Int(round(pop2setPropDrivingZ * (1-pop2setPropDrivingZ) * pop2SizeMale))\npop2numMaleSecondDriveZ = Int(round((1-pop2setPropDrivingZ) * pop2setPropDrivingZ * pop2SizeMale))\npop2numMaleBoring = Int(round((1-pop2setPropDrivingZ)^2 * pop2SizeMale))\npop2Males = vcat(fill(maleTwoDriveZ, pop2numMaleTwoDriveZ),\n                fill(maleFirstDriveZ, pop2numMaleFirstDriveZ),\n                fill(maleSecondDriveZ, pop2numMaleSecondDriveZ),\n                fill(maleBoring, pop2numMaleBoring))\npop2 = Population(pop2Females, pop2Males)\n\nPopulation(Indiv[Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))  …  Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))], Indiv[Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))  …  Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))])\n\n\npop3 has 5% driving autosome (A). We again use HW equilibrium for the initial setup of the frequencies of different individual types:\n\npop3setPropDrivingA = 0.05\npop3SizeFemale = 10_000\npop3SizeMale = 10_000\n\npop3numFemaleTwoDriveA = Int(round(pop3setPropDrivingA^2 * pop3SizeFemale))\npop3numFemaleFirstDriveA = Int(round(pop3setPropDrivingA * (1-pop3setPropDrivingA) * pop3SizeFemale))\npop3numFemaleSecondDriveA = Int(round((1-pop3setPropDrivingA) * pop3setPropDrivingA * pop3SizeFemale))\npop3numFemaleBoring = Int(round((1-pop3setPropDrivingA)^2 * pop3SizeFemale))\n\npop3Females = vcat(fill(femaleTwoDriveA, pop3numFemaleTwoDriveA),\n                fill(femaleFirstDriveA, pop3numFemaleFirstDriveA),\n                fill(femaleSecondDriveA, pop3numFemaleSecondDriveA),\n                fill(femaleBoring, pop3numFemaleBoring))\n\npop3numMaleTwoDriveA = Int(round(pop3setPropDrivingA^2 * pop3SizeMale))\npop3numMaleFirstDriveA = Int(round(pop3setPropDrivingA * (1-pop3setPropDrivingA) * pop3SizeMale))\npop3numMaleSecondDriveA = Int(round((1-pop3setPropDrivingA) * pop3setPropDrivingA * pop3SizeMale))\npop3numMaleBoring = Int(round((1-pop3setPropDrivingA)^2 * pop3SizeMale))\n\npop3Males = vcat(fill(maleTwoDriveA, pop3numMaleTwoDriveA),\n                fill(maleFirstDriveA, pop3numMaleFirstDriveA),\n                fill(maleSecondDriveA, pop3numMaleSecondDriveA),\n                fill(maleBoring, pop3numMaleBoring))\npop3 = Population(pop3Females, pop3Males)\n\nPopulation(Indiv[Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0))  …  Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))], Indiv[Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.5, 0.0, 0.0))  …  Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))])\n\n\npop4 has 5% driving W and 5% driving Z:\n\npop4setPropDrivingW = 0.05\npop4setPropDrivingZ = 0.05\npop4SizeFemale = 10_000\npop4SizeMale = 10_000\n\npop4numFemaleDriveWZ = Int(round(pop4setPropDrivingW * pop4setPropDrivingZ * pop4SizeFemale))\npop4numFemaleDriveW = Int(round(pop4setPropDrivingW * (1-pop4setPropDrivingZ) * pop4SizeFemale))\npop4numFemaleDriveZ = Int(round((1-pop4setPropDrivingW) * pop4setPropDrivingZ * pop4SizeFemale))\npop4numFemaleBoring = Int(round((1-pop4setPropDrivingW) * (1-pop4setPropDrivingZ) * pop4SizeFemale))\n\npop4Females = vcat(fill(femaleDriveWZ, pop4numFemaleDriveWZ),\n                fill(femaleDriveW, pop4numFemaleDriveW),\n                fill(femaleDriveZ, pop4numFemaleDriveZ),\n                fill(femaleBoring, pop4numFemaleBoring))\n\npop4numMaleTwoDriveZ = Int(round(pop4setPropDrivingZ^2 * pop4SizeMale))\npop4numMaleFirstDriveZ = Int(round(pop4setPropDrivingZ * (1-pop4setPropDrivingZ) * pop4SizeMale))\npop4numMaleSecondDriveZ = Int(round((1-pop4setPropDrivingZ) * pop4setPropDrivingZ * pop4SizeMale))\npop4numMaleBoring = Int(round((1-pop4setPropDrivingZ)^2 * pop4SizeMale))\npop4Males = vcat(fill(maleTwoDriveZ, pop4numMaleTwoDriveZ),\n                fill(maleFirstDriveZ, pop4numMaleFirstDriveZ),\n                fill(maleSecondDriveZ, pop4numMaleSecondDriveZ),\n                fill(maleBoring, pop4numMaleBoring))\npop4 = Population(pop4Females, pop4Males)\n\nPopulation(Indiv[Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))  …  Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))], Indiv[Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))  …  Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))])\n\n\npop5 has 5% driving W (the stronger one) and 5% drive-suppressing autosome. For simplicity in setting this up, 5% of both females and males will start with 2 copies of drive-suppressing autosome, and otherwise boring chromosomes.\n\npop5setPropDrivingWstrong = 0.05\npop5setPropSuppressorA = 0.05\npop5SizeFemale = 10_000\npop5SizeMale = 10_000\n\npop5numFemaleTwoDriveSuppressorA = Int(round(pop5setPropSuppressorA * pop5SizeFemale))\npop5numFemaleDriveWstrong = Int(round(pop5setPropDrivingWstrong * pop5SizeFemale))\npop5numFemaleBoring = pop5SizeFemale - pop5numFemaleTwoDriveSuppressorA - pop5numFemaleDriveWstrong\n\npop5Females = vcat(fill(femaleTwoDriveSuppressorA, pop5numFemaleTwoDriveSuppressorA), \n                fill(femaleDriveWstrong, pop5numFemaleDriveWstrong), \n                fill(femaleBoring, pop5numFemaleBoring))\n\npop5numMaleTwoDriveSuppressorA = Int(round(pop5setPropSuppressorA * pop5SizeMale))\npop5numMaleBoring = pop5SizeMale - pop5numMaleTwoDriveSuppressorA\n\npop5Males = vcat(fill(maleTwoDriveSuppressorA, pop5numMaleTwoDriveSuppressorA),\n                fill(maleBoring, pop5numMaleBoring))\npop5 = Population(pop5Females, pop5Males)\n\nPopulation(Indiv[Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5))  …  Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))], Indiv[Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.5), Chrom(\"1\", 1.0, 0.0, 0.5))  …  Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))])\n\n\npop6 has 5% driving W (the stronger one) and 5% drive-cancelling autosome. For simplicity in setting this up, 5% of both females and males will start with 2 copies of drive-cancelling autosome, and otherwise boring chromosomes.\n\npop6setPropDrivingWstrong = 0.05\npop6setPropCancellerA = 0.05\npop6SizeFemale = 10_000\npop6SizeMale = 10_000\n\npop6numFemaleTwoDriveCancellerA = Int(round(pop6setPropCancellerA * pop6SizeFemale))\npop6numFemaleDriveWstrong = Int(round(pop6setPropDrivingWstrong * pop6SizeFemale))\npop6numFemaleBoring = pop6SizeFemale - pop6numFemaleTwoDriveCancellerA - pop6numFemaleDriveWstrong\n\npop6Females = vcat(fill(femaleTwoDriveCancellerA, pop6numFemaleTwoDriveCancellerA), \n                fill(femaleDriveWstrong, pop6numFemaleDriveWstrong), \n                fill(femaleBoring, pop6numFemaleBoring))\n\npop6numMaleTwoDriveCancellerA = Int(round(pop6setPropCancellerA * pop6SizeMale))\npop6numMaleBoring = pop6SizeMale - pop6numMaleTwoDriveCancellerA\n\npop6Males = vcat(fill(maleTwoDriveCancellerA, pop6numMaleTwoDriveCancellerA),\n                fill(maleBoring, pop6numMaleBoring))\npop6 = Population(pop6Females, pop6Males)\n\nPopulation(Indiv[Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0))  …  Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))], Indiv[Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 1.0), Chrom(\"1\", 1.0, 0.0, 1.0))  …  Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))])\n\n\n\n\n\nMake a function for breeding for one generation\nWe will assume random mating, constant population size, and non-overlapping generations.\n\nfunction breedOneGeneration(population::Population; k = length(population.popFemales) + length(population.popMales))\n    # can set the number of offspring (k) in function call, or leave out and it will set k according to the current population size\n    # cycle through offspring, choosing random parents\n    offspringFemales = []\n    offspringMales = []\n    for i in 1:k\n        mother = sample(population.popFemales)\n        father = sample(population.popMales)\n        offspring = makeOneOffspring(mother, father)\n        if offspring.sexChromFromEgg.kind == \"W\" # so offspring is female\n            push!(offspringFemales, offspring)\n        elseif offspring.sexChromFromEgg.kind == \"Z\" # so offspring is male\n            push!(offspringMales, offspring)\n        end\n    end\n    return Population(offspringFemales, offspringMales)\nend\n\nbreedOneGeneration (generic function with 2 methods)\n\n\nTest the above function with one generation of breeding:\n\npopNext = breedOneGeneration(pop1)\nprintln(\"The offspring generation has \", string(length(popNext.popFemales)), \" females and \", string(length(popNext.popMales)), \" males.\")\n\nThe offspring generation has 10005 females and 9995 males.\n\n\n\n\nCreate some functions for tracking population proportions\n\nFunction for calculating population proportion of driving W\n\nfunction getPropDrivingW(population::Population)\n    driving = []\n    for i in population.popFemales # all females have a single W, making next line OK\n        if i.sexChromFromEgg.spindleAttraction &gt; 1.0\n            push!(driving, true)\n        else push!(driving, false)\n        end\n    end\n    return sum(driving) / length(driving)\nend\n\ngetPropDrivingW (generic function with 2 methods)\n\n\nTest the function above:\n\ngetPropDrivingW(pop1)\n\n0.05\n\n\n\n\nFunction for calculating population proportion of driving Z\n\nfunction getPropDrivingZ(population::Population)\n    driving = []\n    # have to cycle through females and males to count up all the driving Z\n    for i in population.popFemales\n        if i.sexChromFromSperm.spindleAttraction &gt; 1.0\n            push!(driving, true)\n        else push!(driving, false)\n        end\n    end\n    for i in population.popMales\n        if i.sexChromFromEgg.spindleAttraction &gt; 1.0\n            push!(driving, true)\n        else push!(driving, false)\n        end\n        if i.sexChromFromSperm.spindleAttraction &gt; 1.0\n            push!(driving, true)\n        else push!(driving, false)\n        end     \n    end\n    return sum(driving) / length(driving)       \nend\n\ngetPropDrivingZ (generic function with 2 methods)\n\n\nTest the function above:\n\ngetPropDrivingZ(pop2)\n\n0.05\n\n\n\n\nFunction for calculating population proportion of driving autosome\n\nfunction getPropDrivingA(population::Population)\n    driving = []\n    # cycle through females and males to count up all the driving autosomes\n    for i in population.popFemales\n        if i.autosome1FromEgg.spindleAttraction &gt; 1.0\n            push!(driving, true)\n        else push!(driving, false)\n        end\n        if i.autosome1FromSperm.spindleAttraction &gt; 1.0\n            push!(driving, true)\n        else push!(driving, false)\n        end     \n    end\n    for i in population.popMales\n        if i.autosome1FromEgg.spindleAttraction &gt; 1.0\n            push!(driving, true)\n        else push!(driving, false)\n        end\n        if i.autosome1FromSperm.spindleAttraction &gt; 1.0\n            push!(driving, true)\n        else push!(driving, false)\n        end     \n    end\n    return sum(driving) / length(driving)\nend\n\ngetPropDrivingA (generic function with 1 method)\n\n\nTest the function above:\n\ngetPropDrivingA(pop3)\n\n0.05\n\n\n\n\nFunction for calculating population proportion of suppressing autosome\n\nfunction getPropSuppressingA(population::Population)\n    suppressing = []\n    # have to cycle through females and males to count up all the autosomes of this type\n    for i in population.popFemales\n        if i.autosome1FromEgg.suppressStrength &gt; 0.0\n            push!(suppressing, true)\n        else push!(suppressing, false)\n        end\n        if i.autosome1FromSperm.suppressStrength &gt; 0.0\n            push!(suppressing, true)\n        else push!(suppressing, false)\n        end     \n    end\n    for i in population.popMales\n        if i.autosome1FromEgg.suppressStrength &gt; 0.0\n            push!(suppressing, true)\n        else push!(suppressing, false)\n        end\n        if i.autosome1FromSperm.suppressStrength &gt; 0.0\n            push!(suppressing, true)\n        else push!(suppressing, false)\n        end     \n    end\n    return sum(suppressing) / length(suppressing)\nend\n\ngetPropSuppressingA (generic function with 1 method)\n\n\n\n\n\nFunction for survival to adulthood\nThis is not discussed in the paper, but I’ve built possible survival costs into the model for expansion in the future. There are two types:\n\nFirst, that specified by the fitnessLoss field of the Chrom struct.\nAlso, in the below we can specify a fitness cost (in survival to adulthood) for high spindle attraction during mitosis. This takes the total spindle attraction above 1 and multiplies it by a parameter driveCost to get the fitness cost. Here’s the function to calculate this spindle attraction cost:\n\n\nfunction getSpindleAttractionFitnessCost(indiv::Indiv; driveCost = 0.0)\n    excessSpindleAttraction = (indiv.sexChromFromEgg.spindleAttraction - 1) +\n                            (indiv.sexChromFromSperm.spindleAttraction - 1) +\n                            (indiv.autosome1FromEgg.spindleAttraction - 1) +\n                            (indiv.autosome1FromSperm.spindleAttraction - 1)\n    spindleAttractionFitnessCost = driveCost * excessSpindleAttraction\n    if spindleAttractionFitnessCost &gt; 1.0\n        spindleAttractionFitnessCost = 1.0\n    end\n    return spindleAttractionFitnessCost\nend\n\ngetSpindleAttractionFitnessCost (generic function with 1 method)\n\n\nHere’s the complete function for deterimining the population of individuals that survived to adulthood:\n\nfunction surviveToAdulthood(population::Population; driveCost = 0.0)\n    femalePopSize = length(population.popFemales) \n    malePopSize = length(population.popMales)\n    # cycle through individuals, determining survival\n    survivingFemales = []\n    survivingMales = []\n    for i in population.popFemales  \n        probSurvival = (1.0 - i.sexChromFromEgg.fitnessLoss) * (1.0 - i.sexChromFromSperm.fitnessLoss) * (1.0 - getSpindleAttractionFitnessCost(i; driveCost = driveCost))\n        if probSurvival &gt; rand()  # the individual survives\n            push!(survivingFemales, i)\n        end\n    end\n    for i in population.popMales\n        probSurvival = (1.0 - i.sexChromFromEgg.fitnessLoss) * (1.0 - i.sexChromFromSperm.fitnessLoss) * (1.0 - getSpindleAttractionFitnessCost(i; driveCost = driveCost))\n        if probSurvival &gt; rand()  # the individual survives\n            push!(survivingMales, i)        \n        end\n    end\n    return Population(survivingFemales, survivingMales)\nend\n\nsurviveToAdulthood (generic function with 2 methods)\n\n\nIn the paper, there are no survival fitness costs. (So all fitnessLoss fields of chromosomes and driveCost in the above function were set to 0.0)\n\n\nFunction for running for many generations\nKeep track of proportion of females, driving W, driving Z, driving A, and suppressors.\n\nfunction runManyGens(population::Population, gens::Int; k = length(population.popFemales) + length(population.popMales), driveCost = 0)\n    # The above sets k (the number of offspring in each generation) as the starting population size\n    propFemale = fill(-0.9999, gens+1)  # start with obviously wrong values\n    propDrivingZ = fill(-0.9999, gens+1)\n    propDrivingW = fill(-0.9999, gens+1)\n    propDrivingA = fill(-0.9999, gens+1)\n    propSuppressingA = fill(-0.9999, gens+1)\n    # record proportions in starting population (generation 0; index 1)\n    propFemale[1] = length(population.popFemales) / \n                        (length(population.popFemales) + length(population.popMales))\n    propDrivingW[1] = getPropDrivingW(population)\n    propDrivingZ[1] = getPropDrivingZ(population)\n    propDrivingA[1] = getPropDrivingA(population)\n    propSuppressingA[1] = getPropSuppressingA(population)\n    for i in 1:gens\n        # produce offspring\n        offspringPopulation = breedOneGeneration(population; k)\n        # determine survival to adulthood\n        population = surviveToAdulthood(offspringPopulation; driveCost = driveCost)\n        # record proportions in the offspring adult generation\n        propFemale[i+1] = length(population.popFemales) / \n                        (length(population.popFemales) + length(population.popMales))\n        propDrivingW[i+1] = getPropDrivingW(population)\n        propDrivingZ[i+1] = getPropDrivingZ(population)\n        propDrivingA[i+1] = getPropDrivingA(population)\n        propSuppressingA[i+1] = getPropSuppressingA(population)\n    end\n    return (propFemale = propFemale, \n            propDrivingW = propDrivingW, \n            propDrivingZ = propDrivingZ,\n            propDrivingA = propDrivingA, \n            propSuppressingA = propSuppressingA, \n            population = population)\nend\n\nrunManyGens (generic function with 2 methods)\n\n\n\n\nRun many generations, and plot proportions over time of:\n\nfemales\ndriving W\ndriving Z\nsuppressing Autosome 1\n\n\nrunLength = 100\npop1run = runManyGens(pop1, runLength, driveCost = 0.0)\npop1plot = plot(0:runLength, pop1run.propFemale, color = :purple, label = \"Females\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving W, Drive Strength = \" * string(driveStrength))\nxlims!(0, 100)\nylims!(0, 1.05)\nplot!(0:runLength, pop1run.propDrivingW, color = :red, label = \"Driving W\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npop1Brun = runManyGens(pop1B, 200, driveCost = 0.0)\npop1Bplot = plot(0:200, pop1Brun.propFemale, color = :purple, label = \"Females\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving W, Drive Strength = \" * string(driveStrengthWeak))\nxlims!(0, 200)\nylims!(0, 1.05)\nplot!(0:200, pop1Brun.propDrivingW, color = :red, label = \"Driving W\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npop2run = runManyGens(pop2, runLength, driveCost = 0.0)\npop2plot = plot(0:runLength, pop2run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving Z, Drive Strength = \" * string(driveStrength))\nxlims!(0,100)\nylims!(0, 1.05)\nplot!(0:runLength, pop2run.propDrivingZ, color = :blue, label = \"Driving Z\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npop3run = runManyGens(pop3, runLength, driveCost = 0.0)\npop3plot = plot(0:runLength, pop3run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving Autosome, Drive Strength = \" * string(driveStrength))\nxlims!(0, 100)\nylims!(0, 1.05)\nplot!(0:runLength, pop3run.propDrivingA, color = :green, label = \"Driving autosome\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npop4run = runManyGens(pop4, runLength, driveCost = 0.0)\npop4plot = plot(0:runLength, pop4run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving W and Z, Drive Strength = \" * string(driveStrength))\nxlims!(0, 100)\nylims!(0, 1.05)\nplot!(0:runLength, pop4run.propDrivingW, color = :red, label = \"Driving W\")\nplot!(0:runLength, pop4run.propDrivingZ, color = :blue, label = \"Driving Z\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCombine some of above for Fig. 2 of paper\n\nFig2A = plot(0:runLength, pop1run.propFemale, color = :purple, linewidth = 2, label = \"Females\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"A. Driving W\", titlefontsize = 14, titlelocation = :left)\nxlims!(0, 100)\nylims!(0, 1.05)\nplot!(0:runLength, pop1run.propDrivingW, color = :red, linewidth = 4, label = \"Driving W\")\nannotate!(35, 0.85, (\"Driving W\", :left, 8, :red))\nannotate!(80, 0.5, (\"females\", :left, 8, :purple))\n\nFig2B = plot(0:runLength, pop2run.propFemale, color = :purple, linewidth = 2, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"B. Driving Z\", titlefontsize = 14, titlelocation = :left)\nxlims!(0, 100)\nylims!(0, 1.05)\nplot!(0:runLength, pop2run.propDrivingZ, color = :blue, linewidth = 4, label = \"Driving Z\")\nannotate!(70, 0.67, (\"Driving Z\", :left, 8, :blue))\nannotate!(80, 0.3, (\"females\", :left, 8, :purple))\n\nFig2C = plot(0:runLength, pop3run.propFemale, color = :purple, linewidth = 2, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"C. Driving autosome\")\nxlims!(0, 100)\nylims!(0, 1.05)\nplot!(0:runLength, pop3run.propDrivingA, color = :green, linewidth = 4, label = \"Driving autosome\", titlefontsize = 14, titlelocation = :left)\nannotate!(55, 0.82, (\"Driving autosome\", :left, 8, :green))\nannotate!(80, 0.4, (\"females\", :left, 8, :purple))\n\nFigure2 = plot(Fig2A, Fig2B, Fig2C, layout=(3,1), legend=false, size = (400, 600))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo save the figure, run the following (after changing the false to true):\n\nif false  # set to true to save plot\n    savefig(Figure2, \"Figure2.svg\")\nend \n\n\n\nRun some simulations with suppressors\nFirst, with a 50% autosomal suppressor (when homozygous, half that when heterozygous) of any drivers:\n\npop5run = runManyGens(pop5, 400, driveCost = 0.0)\npop5plot = plot(0:400, pop5run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving W and 50% Suppressor, Drive Strength = \" * string(driveStrengthStrong))\nxlims!(0, 400)\nylims!(0, 1.05)\nplot!(0:400, pop5run.propDrivingW, color = :red, label = \"Driving W\")\nplot!(0:400, pop5run.propSuppressingA, color = :grey, label = \"Autosomal drive suppressor\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow with a full supressor when homozygous (i.e., a “canceller”):\n\npop6run = runManyGens(pop6, 400, driveCost = 0.0)\npop6plot = plot(0:400, pop6run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving W and Canceller, Drive Strength = \" * string(driveStrengthStrong))\nxlims!(0, 400)\nylims!(0, 1)\nplot!(0:400, pop6run.propDrivingW, color = :red, label = \"Driving W\")\nplot!(0:400, pop6run.propSuppressingA, color = :grey, label = \"Autosomal drive canceller\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild a deterministic version of the model\nThe above simulations were individual-based, with finite population size, hence had stochasticity (i.e., slightly different results each time, although running with large population size—20,000—makes that effect small.)\nBelow, we can develop a deterministic version that has no randomness. We do that by assuming infinite population sizes (not realistic of course, but handy if interested in a non-stochastic outcome). There are also efficiency benefits in terms of computation (i.e., faster and needing less memory).\nRather than have individuals in our simulations, we will keep track of proportions of individuals (of infinite population) that are of these four female types:\n\nfemaleBoring\nfemaleDriveW\nfemaleDriveZ\nfemaleDriveWZ\n\nAnd these four males types:\n\nmaleBoring\nmaleFirstDriveZ\nmaleSecondDriveZ\nmaleTwoDriveZ\n\nWe will allow sex ratio to diverge from 50:50, by having all of the above add up to frequency of 1.\nUsing this approach, we will not (yet) incorporate suppressors of drive.\nWill make a new data type called PopInfinite, to store data describing individual type frequencies in an infinite population.\n\nmutable struct PopInfinite\n    indivKinds # a vector of `Indiv` kinds\n    freqs # a vector of frequencies of those `indKinds` in the population\nend\n\nWrite a function for setting up a PopInfinite population, assuming HW equilibrium:\n\nfunction startPopInfinite(startFreqfemale, startFreqDriveW, startFreqDriveZ)\n    \n    indivKindsStart = [femaleBoring,\n            femaleDriveW,\n            femaleDriveZ,\n            femaleDriveWZ,\n            maleBoring,\n            maleFirstDriveZ,\n            maleSecondDriveZ,\n            maleTwoDriveZ]\n\n    startKindFreqs = [startFreqfemale * (1-startFreqDriveW) * (1-startFreqDriveZ),\n                startFreqfemale * startFreqDriveW * (1-startFreqDriveZ),\n                startFreqfemale * (1-startFreqDriveW) * startFreqDriveZ,\n                startFreqfemale * startFreqDriveW * startFreqDriveZ,\n                (1-startFreqfemale) * (1-startFreqDriveZ) * (1-startFreqDriveZ),\n                (1-startFreqfemale) * startFreqDriveZ * (1-startFreqDriveZ),\n                (1-startFreqfemale) * (1-startFreqDriveZ) * startFreqDriveZ,\n                (1-startFreqfemale) * startFreqDriveZ * startFreqDriveZ]\n\n    return PopInfinite(indivKindsStart, startKindFreqs)\nend\n\nstartPopInfinite (generic function with 1 method)\n\n\n\nSet up some infinite populations (to correspond to some of the finite ones above):\n\npopInf1 = startPopInfinite(0.5, 0.05, 0)  # driving W\npopInf2 = startPopInfinite(0.5, 0, 0.05)  # driving Z\npopInf4 = startPopInfinite(0.5, 0.05, 0.05)  # driving W & Z\npopInf5 = startPopInfinite(0.5, 0.05, 1.0)  # driving W & already fixed driving Z\n\nPopInfinite(Indiv[Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"W\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.0, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0)), Indiv(Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"Z\", 1.5, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0), Chrom(\"1\", 1.0, 0.0, 0.0))], [0.0, 0.0, 0.475, 0.025, 0.0, 0.0, 0.0, 0.5])\n\n\n\n\nFunction for breeding one generation using a PopInfinite\nThis adds a method to the existing function breedOneGeneration()\nWill build this functions below using the idea of producing gametes in their proportions, and then combining them randomly. This will get the probability of W transmission, based on spindleAttraction of W and Z:\n\nfunction produceEggProbW(femaleIndiv::Indiv)\ntransProbW = femaleIndiv.sexChromFromEgg.spindleAttraction /\n            (femaleIndiv.sexChromFromEgg.spindleAttraction + femaleIndiv.sexChromFromSperm.spindleAttraction)\nend\n\nproduceEggProbW (generic function with 1 method)\n\n\nNow make a function to carry out one generation of breeding:\n\nfunction breedOneGeneration(population::PopInfinite, chromKinds)\n    # generate egg and sperm genotype frequencies\n    eggFreqs = zeros(length(chromKinds))  # these are frequencies as proportions of all gametes\n    spermFreqs = zeros(length(chromKinds))  # these are frequencies as proportions of all gametes\n    for i in 1:length(population.freqs)  # cycle through kinds of individuals\n        if population.indivKinds[i].sexChromFromEgg.kind == \"W\"  # female individual\n            eggProbW = produceEggProbW(population.indivKinds[i]) # get prob of W egg\n            chromKindRow = findfirst(isequal(population.indivKinds[i].sexChromFromEgg), chromKinds) # get row for recording the egg type\n            eggFreqs[chromKindRow] = eggFreqs[chromKindRow] + (population.freqs[i] * eggProbW) # add prob to proper row of egg frequency table \n            # now consider prob of Z egg\n            eggProbZ = 1 - eggProbW\n            chromKindRow = findfirst(isequal(population.indivKinds[i].sexChromFromSperm), chromKinds) # get row for recording the egg type, as carrying mother's chromosome that came from sperm (in her parent)\n            eggFreqs[chromKindRow] = eggFreqs[chromKindRow] + (population.freqs[i] * eggProbZ)\n        \n        elseif population.indivKinds[i].sexChromFromEgg.kind == \"Z\"  # male individual, so no centromere drive\n            # first consider transferring chromosome that came from individual's mother\n            chromKindRow = findfirst(isequal(population.indivKinds[i].sexChromFromEgg), chromKinds) # get row for recording the sperm type\n            spermFreqs[chromKindRow] = spermFreqs[chromKindRow] + (population.freqs[i] * 0.5)\n            # now consider transferring chromosome that came from individual's father\n            chromKindRow = findfirst(isequal(population.indivKinds[i].sexChromFromSperm), chromKinds) # get row for recording sperm type\n            spermFreqs[chromKindRow] = spermFreqs[chromKindRow] + (population.freqs[i] * 0.5)\n        end\n    end\n\n    # calculate egg freqs as a proportion of eggs\n    eggProps = eggFreqs ./ sum(eggFreqs)\n\n    # calculate sperm freqs as a proportion of sperm\n    spermProps = spermFreqs ./ sum(spermFreqs)\n    \n    # now combine eggs and sperm to make new population\n    newIndivKindFreqs = zeros(length(population.freqs))\n    for i in 1:length(eggProps)  # loop through egg types\n        for j in 1:length(spermProps)  # loop through sperm types\n            # find row for the resulting kind of individual when combining these gametes\n            focalIndivKind = Indiv(chromKinds[i], chromKinds[j], boringAutosome1, boringAutosome1)\n            indivKindRow = findfirst(isequal(focalIndivKind), population.indivKinds)\n            if eggProps[i] &gt; 0.0 && spermProps[j] &gt; 0.0\n                # add frequency of this egg/sperm combo to table of new individual freqs\n                newIndivKindFreqs[indivKindRow] = newIndivKindFreqs[indivKindRow] + (eggProps[i] * spermProps[j])\n                #println(focalIndivKind)\n                #println(indivKindRow)\n            end\n        end\n    end\n\n    return PopInfinite(population.indivKinds, newIndivKindFreqs)\nend\n\nbreedOneGeneration (generic function with 2 methods)\n\n\n\n\nAdd method to surviveToAdulthood() function, for PopInfinite object\n\nfunction surviveToAdulthood(population::PopInfinite)\n    probSurvivals = fill(-9.0, length(population.indivKinds))\n    for i in 1:length(population.indivKinds) # cycle through kinds of individuals\n        indivKind = population.indivKinds[i]\n        probSurvivals[i] = (1.0 - indivKind.sexChromFromEgg.fitnessLoss) * (1.0 - indivKind.sexChromFromSperm.fitnessLoss)\n    end\n    return PopInfinite(population.indivKinds, (population.freqs .* probSurvivals))\nend\n\nsurviveToAdulthood (generic function with 2 methods)\n\n\n(Note that in all the simulations presented in the paper, there is 100% survival to adulthood—because fitnessLoss is zero. Hence prior to using fitnessLoss of other values, I recommend careful testing.)\n\n\nAdd methods to functions for calculating proportions\nThe below with add methods to existing functions, for PopInfinite objects:\n\nfunction getPropDrivingW(population::PopInfinite)\n    freqDriveW = 0.0\n    freqBoringW = 0.0\n    for i in 1:length(population.freqs)\n        if population.indivKinds[i].sexChromFromEgg.kind == \"W\"  # females\n            if population.indivKinds[i].sexChromFromEgg.spindleAttraction &gt; 1.0\n                freqDriveW = freqDriveW + population.freqs[i]\n            else \n                freqBoringW = freqBoringW + population.freqs[i]\n            end\n        end\n    end\n    return freqDriveW / (freqDriveW + freqBoringW)\nend\n\ngetPropDrivingW (generic function with 2 methods)\n\n\n\nfunction getPropDrivingZ(population::PopInfinite)\n    freqDriveZ = 0.0\n    freqBoringZ = 0.0\n    for i in 1:length(population.freqs)\n        if population.indivKinds[i].sexChromFromEgg.kind == \"W\"  # females\n            if population.indivKinds[i].sexChromFromSperm.spindleAttraction &gt; 1.0\n                freqDriveZ = freqDriveZ + population.freqs[i]\n            else \n                freqBoringZ = freqBoringZ + population.freqs[i]\n            end\n        end\n\n        if population.indivKinds[i].sexChromFromEgg.kind == \"Z\"  # males\n            # check first Z (from egg)\n            if population.indivKinds[i].sexChromFromEgg.spindleAttraction &gt; 1.0\n                freqDriveZ = freqDriveZ + population.freqs[i]\n            else \n                freqBoringZ = freqBoringZ + population.freqs[i]\n            end\n            # check second Z (from sperm)\n            if population.indivKinds[i].sexChromFromSperm.spindleAttraction &gt; 1.0\n                freqDriveZ = freqDriveZ + population.freqs[i]\n            else \n                freqBoringZ = freqBoringZ + population.freqs[i]\n            end\n        end\n    end\n    return freqDriveZ / (freqDriveZ + freqBoringZ)\nend\n\ngetPropDrivingZ (generic function with 2 methods)\n\n\n\nfunction getPropFemale(population::PopInfinite)\n    freqFemale = 0.0\n    for i in 1:length(population.freqs)\n        if population.indivKinds[i].sexChromFromEgg.kind == \"W\"  # females\n            freqFemale = freqFemale + population.freqs[i]\n        end\n    end\n    return freqFemale\nend\n\ngetPropFemale (generic function with 1 method)\n\n\n\n\nAdd method to runManyGens() function, for PopInfinite object\n\nfunction runManyGens(population::PopInfinite, chromKinds, gens::Int)\n    propFemale = fill(-0.9999, gens+1)  # start with obviously wrong values\n    propDrivingZ = fill(-0.9999, gens+1)\n    propDrivingW = fill(-0.9999, gens+1)\n    # record proportions in starting population (generation 0; index 1)\n    propFemale[1] = getPropFemale(population)\n    propDrivingW[1] = getPropDrivingW(population)\n    propDrivingZ[1] = getPropDrivingZ(population)\n    for i in 1:gens\n        # breed and survive to adulthood\n        populationOffspring = breedOneGeneration(population, chromKinds)\n        population = surviveToAdulthood(populationOffspring)\n        # record proportions in the offspring adult generation\n        propFemale[i+1] = getPropFemale(population)\n        propDrivingW[i+1] = getPropDrivingW(population)\n        propDrivingZ[i+1] = getPropDrivingZ(population)\n    end\n    return (propFemale = propFemale, \n            propDrivingW = propDrivingW, \n            propDrivingZ = propDrivingZ,\n            population = population)\nend\n\nrunManyGens (generic function with 2 methods)\n\n\n\n\nRun some deterministic simulations\n\npopInf1Run = runManyGens(popInf1, chromKinds, runLength)\npopInf1plot = plot(0:runLength, popInf1Run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving W, Drive Strength = \" * string(driveStrength))\nxlims!(0,100)\nylims!(0, 1)\nplot!(0:runLength, popInf1Run.propDrivingW, color = :red, label = \"Driving W\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npopInf2Run = runManyGens(popInf2, chromKinds, runLength)\npopInf2plot = plot(0:runLength, popInf2Run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving Z, Drive Strength = \" * string(driveStrength))\nxlims!(0,100)\nylims!(0, 1)\nplot!(0:runLength, popInf2Run.propDrivingZ, color = :blue, label = \"Driving Z\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npopInf4Run = runManyGens(popInf4, chromKinds, runLength)\npopInf4plot = plot(0:runLength, popInf4Run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving W & Z, Drive Strength = \" * string(driveStrength))\nxlims!(0,100)\nylims!(0, 1)\nplot!(0:runLength, popInf4Run.propDrivingW, color = :red, label = \"Driving W\")\nplot!(0:runLength, popInf4Run.propDrivingZ, color = :blue, label = \"Driving Z\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npopInf5Run = runManyGens(popInf5, chromKinds, runLength)\npopInf5plot = plot(0:runLength, popInf5Run.propFemale, color = :purple, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"Driving W and fixed driving Z, Drive Strength = \" * string(driveStrength))\nxlims!(0,100)\nylims!(0, 1)\nplot!(0:runLength, popInf5Run.propDrivingW, color = :red, label = \"Driving W\")\nplot!(0:runLength, popInf5Run.propDrivingZ, color = :blue, label = \"Driving Z\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPut some of the above together as Fig. 3 of the paper\n\nFig3A = plot(0:runLength, popInf1Run.propFemale, color = :purple, linewidth = 2, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"A. Driving W\", titlefontsize = 13, titlelocation = :left)\nxlims!(0,100)\nylims!(0, 1.05)\nplot!(0:runLength, popInf1Run.propDrivingW, color = :red, linewidth = 4, linealpha = 0.75, label = \"Driving W\")\n\nFig3B = plot(0:runLength, popInf2Run.propFemale, color = :purple, linewidth = 2, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"B. Driving Z\", titlefontsize = 13, titlelocation = :left)\nxlims!(0,100)\nylims!(0, 1.05)\nplot!(0:runLength, popInf2Run.propDrivingZ, color = :blue, linewidth = 4, linealpha = 0.75, label = \"Driving Z\")\n\nFig3C = plot(0:runLength, popInf4Run.propFemale, color = :purple, linewidth = 2, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"C. Driving W & Z\", titlefontsize = 13, titlelocation = :left)\nxlims!(0,100)\nylims!(0, 1.05)\nplot!(0:runLength, popInf4Run.propDrivingW, color = :red, linewidth = 4, linealpha = 0.75, label = \"Driving W\")\nplot!(0:runLength, popInf4Run.propDrivingZ, color = :blue, linewidth = 4, linealpha = 0.75, label = \"Driving Z\")\n\nFig3D = plot(0:runLength, popInf5Run.propFemale, color = :purple, linewidth = 2, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"D. Driving W; fixed driving Z\", titlefontsize = 13, titlelocation = :left)\nxlims!(0,100)\nylims!(0, 1.05)\nplot!(0:runLength, popInf5Run.propDrivingZ, color = :blue, linewidth = 4, linealpha = 0.75, label = \"Driving Z\")\nplot!(0:runLength, popInf5Run.propDrivingW, color = :red, linewidth = 4, linealpha = 0.75, label = \"Driving W\")\n\nFig3E = plot(0:400, pop5run.propFemale, color = :purple, linewidth = 2, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"E. Driving W; partial suppressor\", titlefontsize = 13, titlelocation = :left)\nxlims!(0, 400)\nylims!(0, 1.05)\nplot!(0:400, pop5run.propDrivingW, color = :red, linealpha = 0.75, linewidth = 4, label = \"Driving W\")\nplot!(0:400, pop5run.propSuppressingA, color = :grey, linealpha = 0.75, linewidth = 4, label = \"Autosomal drive suppressor\")\nannotate!(25, 0.92, (\"Driving W\", :left, 8, :red))\nannotate!(84, 0.3, (\"Autosomal drive suppressor (partial)\", :left, 8, :grey))\nannotate!(310, 0.58, (\"females\", :left, 8, :purple))\n\nFig3F = plot(pop6run.propFemale, color = :purple, linewidth = 2, label = \"Female\", xlabel = \"Generations\", ylabel = \"Proportion\", title = \"F. Driving W; complete suppressor\", titlefontsize = 13, titlelocation = :left)\nxlims!(0, 400)\nylims!(0, 1.05)\nplot!(0:400, pop6run.propDrivingW, color = :red, linealpha = 0.75, linewidth = 4, label = \"Driving W\")\nplot!(0:400, pop6run.propSuppressingA, color = :grey, linealpha = 0.75, linewidth = 4, label = \"Autosomal drive negator\")\nannotate!(25, 0.92, (\"Driving W\", :left, 8, :red))\nannotate!(55, 0.3, (\"Autosomal drive suppressor (complete)\", :left, 8, :grey))\nannotate!(310, 0.48, (\"females\", :left, 8, :purple))\n\nl = @layout [[a{0.9w};b{0.9w};c{0.9w};d{0.9w}] [e;f]]\nFigure3 = plot(Fig3A, Fig3B, Fig3C, Fig3D, Fig3E, Fig3F, layout=l, legend=false, size = (800, 800))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo save the figure, run the following (after changing the false to true):\n\nif false  # set to true to save plot\n    savefig(Figure3, \"Figure3.svg\")\nend \n\n\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]